name: Tests

on:
  push:
  pull_request:

jobs:
  tests:
    name: ${{ matrix.session }} ${{ matrix.python }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python: "3.12", os: "ubuntu-latest", session: "pre-commit" }
          - { python: "3.12", os: "ubuntu-latest", session: "safety" }
          - { python: "3.12", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.12", os: "ubuntu-latest", session: "tests" }
          - { python: "3.12", os: "windows-latest", session: "tests" }
          - { python: "3.12", os: "macos-latest", session: "tests" }
          - { python: "3.12", os: "ubuntu-latest", session: "typeguard" }
          - { python: "3.12", os: "ubuntu-latest", session: "xdoctest" }
          - { python: "3.12", os: "ubuntu-latest", session: "docs-build" }

    env:
      NOXSESSION: ${{ matrix.session }}
      FORCE_COLOR: "1"
      PRE_COMMIT_COLOR: "always"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5.3.0
        with:
          python-version: ${{ matrix.python }}

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry and Nox using pipx
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
          poetry --version
          nox --version

      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        run: |
          echo "pre-commit cache key is calculated"
          python - <<EOF
          import hashlib
          import sys
          import os
          python = f"py{sys.version_info[0]}.{sys.version_info[1]}"
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = f"${{ runner.os }}-{python}-{digest[:8]}-pre-commit"
          with open(os.environ["GITHUB_ENV"], "a") as file:
              file.write(f"RESULT={result}\n")
          EOF

      - name: Restore pre-commit cache
        uses: actions/cache@v4
        if: matrix.session == 'pre-commit'
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-

      - name: Run Nox session
        run: |
          nox --session=${{ matrix.session }} --python=${{ matrix.python }}

      - name: Upload coverage data
        if: always() && matrix.session == 'tests'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.os }}-${{ matrix.python }}
          path: ".coverage.*"
          include-hidden-files: true

      - name: Upload documentation
        if: matrix.session == 'docs-build'
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/_build

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: "3.12"

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry and Nox using pipx
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
          poetry --version
          nox --version

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: Combine coverage data and display human-readable report
        run: |
          nox --session=coverage

      - name: Create coverage report in XML format
        run: |
          nox --session=coverage -- xml

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v4.6.0
        with:
          files: coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
